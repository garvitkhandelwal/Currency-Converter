{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"./replacers/rem","data":{"isAsync":false}},{"name":"./replacers/vars","data":{"isAsync":false}},{"name":"./replacers/percent","data":{"isAsync":false}},{"name":"./replacers/operation","data":{"isAsync":false}},{"name":"./replacers/scale","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n\n  var _rem = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./replacers/rem\"));\n\n  var _vars = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./replacers/vars\"));\n\n  var _percent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"./replacers/percent\"));\n\n  var _operation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./replacers/operation\"));\n\n  var _scale = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./replacers/scale\"));\n\n  var Value = function () {\n    function Value(value, prop) {\n      var varsArr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var stack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      (0, _classCallCheck2.default)(this, Value);\n      this.value = value;\n      this.outValue = null;\n      this.prop = prop;\n      this.varsArr = varsArr;\n      this.stack = stack;\n    }\n\n    (0, _createClass2.default)(Value, [{\n      key: \"calc\",\n      value: function calc() {\n        if (typeof this.value === 'function') {\n          this.value = this.value();\n        }\n\n        if (typeof this.value === 'string') {\n          this.calcString();\n        } else {\n          this.proxyValue();\n        }\n\n        if (this.isFinal()) {\n          this.applyScale();\n        }\n\n        return this.outValue;\n      }\n    }, {\n      key: \"calcString\",\n      value: function calcString() {\n        var actions = [this.tryCalcOperation, this.tryCalcVar, this.tryCalcRem];\n        var value = this.tryActions(actions, this.value);\n\n        if (value !== null) {\n          this.outValue = value;\n        } else {\n          this.proxyValue();\n        }\n      }\n    }, {\n      key: \"tryActions\",\n      value: function tryActions(actions, str) {\n        for (var i = 0; i < actions.length; i++) {\n          var val = actions[i].call(this, str);\n\n          if (val !== null) {\n            return val;\n          }\n        }\n\n        return null;\n      }\n    }, {\n      key: \"tryCalcOperation\",\n      value: function tryCalcOperation(str) {\n        var opInfo = _operation.default.isOperation(str);\n\n        if (!opInfo) {\n          return null;\n        }\n\n        var operands = ['v1', 'v2'];\n\n        for (var i = 0; i < operands.length; i++) {\n          var operand = operands[i];\n          var operandValue = this.calcOperandValue(opInfo[operand]);\n\n          if (operandValue !== null) {\n            opInfo[operand] = operandValue;\n          } else {\n            return null;\n          }\n        }\n\n        return _operation.default.exec(opInfo);\n      }\n    }, {\n      key: \"calcOperandValue\",\n      value: function calcOperandValue(str) {\n        var actions = [this.tryCalcVar, this.tryCalcPercent, this.tryCalcRem, this.tryCalcFloat];\n        return this.tryActions(actions, str);\n      }\n    }, {\n      key: \"tryCalcVar\",\n      value: function tryCalcVar(str) {\n        if (_vars.default.isVar(str)) {\n          var val = _vars.default.calc(str, this.varsArr);\n\n          if (this.stack.indexOf(str) >= 0) {\n            throw new Error('Cyclic reference: ' + this.stack.concat([str]).join(' -> '));\n          }\n\n          var stack = this.stack.concat([str]);\n          return new Value(val, str, this.varsArr, stack).calc();\n        } else {\n          return null;\n        }\n      }\n    }, {\n      key: \"tryCalcPercent\",\n      value: function tryCalcPercent(str) {\n        if (_percent.default.isPercent(str)) {\n          return _percent.default.calc(str, this.prop);\n        }\n\n        return null;\n      }\n    }, {\n      key: \"tryCalcRem\",\n      value: function tryCalcRem(str) {\n        if (_rem.default.isRem(str)) {\n          var remValue = _vars.default.get('$rem', this.varsArr);\n\n          return _rem.default.calc(str, remValue);\n        } else {\n          return null;\n        }\n      }\n    }, {\n      key: \"tryCalcFloat\",\n      value: function tryCalcFloat(str) {\n        var val = parseFloat(str);\n        return !isNaN(val) ? val : null;\n      }\n    }, {\n      key: \"isFinal\",\n      value: function isFinal() {\n        return !this.stack.length;\n      }\n    }, {\n      key: \"proxyValue\",\n      value: function proxyValue() {\n        this.outValue = this.value;\n      }\n    }, {\n      key: \"applyScale\",\n      value: function applyScale() {\n        if (_vars.default.isVar(this.prop)) {\n          return;\n        }\n\n        var scaleFactor = _vars.default.get('$scale', this.varsArr) || 1;\n\n        if (scaleFactor === 1) {\n          return;\n        }\n\n        if (_scale.default.isScalable(this.outValue, this.prop)) {\n          this.outValue = _scale.default.calc(this.outValue, scaleFactor);\n        }\n      }\n    }]);\n    return Value;\n  }();\n\n  exports.default = Value;\n});","map":[[13,0,5,0],[15,0,6,0],[17,0,7,0],[19,0,8,0],[21,0,9,0],[23,6,11,21,"Value"],[23,11],[24,0,20,2],[24,19,20,14,"value"],[24,24,20,2],[24,26,20,21,"prop"],[24,30,20,2],[24,32,20,53],[25,0,20,53],[25,10,20,27,"varsArr"],[25,17,20,53],[25,88,20,37],[25,90,20,53],[26,0,20,53],[26,10,20,41,"stack"],[26,15,20,53],[26,86,20,49],[26,88,20,53],[27,0,20,53],[28,0,21,4],[28,11,21,9,"value"],[28,16,21,4],[28,19,21,17,"value"],[28,24,21,4],[29,0,23,4],[29,11,23,9,"outValue"],[29,19,23,4],[29,22,23,20],[29,26,23,4],[30,0,24,4],[30,11,24,9,"prop"],[30,15,24,4],[30,18,24,16,"prop"],[30,22,24,4],[31,0,25,4],[31,11,25,9,"varsArr"],[31,18,25,4],[31,21,25,19,"varsArr"],[31,28,25,4],[32,0,26,4],[32,11,26,9,"stack"],[32,16,26,4],[32,19,26,17,"stack"],[32,24,26,4],[33,0,27,3],[37,29,33,9],[38,0,34,4],[38,12,34,8],[38,19,34,15],[38,24,34,20,"value"],[38,29,34,8],[38,34,34,30],[38,44,34,4],[38,46,34,42],[39,0,35,6],[39,15,35,11,"value"],[39,20,35,6],[39,23,35,19],[39,28,35,24,"value"],[39,33,35,19],[39,35,35,6],[40,0,36,5],[42,0,38,4],[42,12,38,8],[42,19,38,15],[42,24,38,20,"value"],[42,29,38,8],[42,34,38,30],[42,42,38,4],[42,44,38,40],[43,0,39,6],[43,15,39,11,"calcString"],[43,25,39,6],[44,0,40,5],[44,9,38,4],[44,15,40,11],[45,0,41,6],[45,15,41,11,"proxyValue"],[45,25,41,6],[46,0,42,5],[48,0,44,4],[48,12,44,8],[48,17,44,13,"isFinal"],[48,24,44,8],[48,26,44,4],[48,28,44,24],[49,0,45,6],[49,15,45,11,"applyScale"],[49,25,45,6],[50,0,46,5],[52,0,48,4],[52,15,48,11],[52,20,48,16,"outValue"],[52,28,48,4],[53,0,49,3],[56,35,56,15],[57,0,57,4],[57,12,57,8,"actions"],[57,19,57,15],[57,22,57,18],[57,23,58,6],[57,28,58,11,"tryCalcOperation"],[57,44,57,18],[57,46,59,6],[57,51,59,11,"tryCalcVar"],[57,61,57,18],[57,63,60,6],[57,68,60,11,"tryCalcRem"],[57,78,57,18],[57,79,57,4],[58,0,62,4],[58,12,62,8,"value"],[58,17,62,13],[58,20,62,16],[58,25,62,21,"tryActions"],[58,35,62,16],[58,36,62,32,"actions"],[58,43,62,16],[58,45,62,41],[58,50,62,46,"value"],[58,55,62,16],[58,56,62,4],[60,0,63,4],[60,12,63,8,"value"],[60,17,63,13],[60,22,63,18],[60,26,63,4],[60,28,63,24],[61,0,64,6],[61,15,64,11,"outValue"],[61,23,64,6],[61,26,64,22,"value"],[61,31,64,6],[62,0,65,5],[62,9,63,4],[62,15,65,11],[63,0,66,6],[63,15,66,11,"proxyValue"],[63,25,66,6],[64,0,67,5],[65,0,68,3],[68,33,75,13,"actions"],[68,40],[68,42,75,22,"str"],[68,45],[68,47,75,27],[69,0,77,4],[69,13,77,9],[69,17,77,13,"i"],[69,18,77,14],[69,21,77,17],[69,22,77,4],[69,24,77,20,"i"],[69,25,77,21],[69,28,77,24,"actions"],[69,35,77,31],[69,36,77,32,"length"],[69,42,77,4],[69,44,77,40,"i"],[69,45,77,41],[69,47,77,4],[69,49,77,45],[70,0,78,6],[70,14,78,10,"val"],[70,17,78,13],[70,20,78,16,"actions"],[70,27,78,23],[70,28,78,24,"i"],[70,29,78,23],[70,30,78,16],[70,31,78,27,"call"],[70,35,78,16],[70,36,78,32],[70,40,78,16],[70,42,78,38,"str"],[70,45,78,16],[70,46,78,6],[72,0,79,6],[72,14,79,10,"val"],[72,17,79,13],[72,22,79,18],[72,26,79,6],[72,28,79,24],[73,0,80,8],[73,19,80,15,"val"],[73,22,80,8],[74,0,81,7],[75,0,82,5],[77,0,83,4],[77,15,83,11],[77,19,83,4],[78,0,84,3],[81,39,86,19,"str"],[81,42],[81,44,86,24],[82,0,87,4],[82,12,87,8,"opInfo"],[82,18,87,14],[82,21,87,17,"operation"],[82,40,87,27,"isOperation"],[82,51,87,17],[82,52,87,39,"str"],[82,55,87,17],[82,56,87,4],[84,0,88,4],[84,12,88,8],[84,13,88,9,"opInfo"],[84,19,88,4],[84,21,88,17],[85,0,89,6],[85,17,89,13],[85,21,89,6],[86,0,90,5],[88,0,92,4],[88,12,92,10,"operands"],[88,20,92,18],[88,23,92,21],[88,24,92,22],[88,28,92,21],[88,30,92,28],[88,34,92,21],[88,35,92,4],[90,0,93,4],[90,13,93,9],[90,17,93,13,"i"],[90,18,93,14],[90,21,93,17],[90,22,93,4],[90,24,93,20,"i"],[90,25,93,21],[90,28,93,24,"operands"],[90,36,93,32],[90,37,93,33,"length"],[90,43,93,4],[90,45,93,41,"i"],[90,46,93,42],[90,48,93,4],[90,50,93,46],[91,0,94,6],[91,14,94,12,"operand"],[91,21,94,19],[91,24,94,22,"operands"],[91,32,94,30],[91,33,94,31,"i"],[91,34,94,30],[91,35,94,6],[92,0,95,6],[92,14,95,12,"operandValue"],[92,26,95,24],[92,29,95,27],[92,34,95,32,"calcOperandValue"],[92,50,95,27],[92,51,95,49,"opInfo"],[92,57,95,55],[92,58,95,56,"operand"],[92,65,95,55],[92,66,95,27],[92,67,95,6],[94,0,96,6],[94,14,96,10,"operandValue"],[94,26,96,22],[94,31,96,27],[94,35,96,6],[94,37,96,33],[95,0,97,8,"opInfo"],[95,12,97,8,"opInfo"],[95,18,97,14],[95,19,97,15,"operand"],[95,26,97,14],[95,27,97,8],[95,30,97,26,"operandValue"],[95,42,97,8],[96,0,98,7],[96,11,96,6],[96,17,98,13],[97,0,100,8],[97,19,100,15],[97,23,100,8],[98,0,101,7],[99,0,102,5],[101,0,103,4],[101,15,103,11,"operation"],[101,34,103,21,"exec"],[101,38,103,11],[101,39,103,26,"opInfo"],[101,45,103,11],[101,46,103,4],[102,0,104,3],[105,39,106,19,"str"],[105,42],[105,44,106,24],[106,0,107,4],[106,12,107,8,"actions"],[106,19,107,15],[106,22,107,18],[106,23,108,6],[106,28,108,11,"tryCalcVar"],[106,38,107,18],[106,40,109,6],[106,45,109,11,"tryCalcPercent"],[106,59,107,18],[106,61,110,6],[106,66,110,11,"tryCalcRem"],[106,76,107,18],[106,78,111,6],[106,83,111,11,"tryCalcFloat"],[106,95,107,18],[106,96,107,4],[107,0,113,4],[107,15,113,11],[107,20,113,16,"tryActions"],[107,30,113,11],[107,31,113,27,"actions"],[107,38,113,11],[107,40,113,36,"str"],[107,43,113,11],[107,44,113,4],[108,0,114,3],[111,33,116,13,"str"],[111,36],[111,38,116,18],[112,0,117,4],[112,12,117,8,"vars"],[112,26,117,13,"isVar"],[112,31,117,8],[112,32,117,19,"str"],[112,35,117,8],[112,36,117,4],[112,38,117,25],[113,0,118,6],[113,14,118,10,"val"],[113,17,118,13],[113,20,118,16,"vars"],[113,34,118,21,"calc"],[113,38,118,16],[113,39,118,26,"str"],[113,42,118,16],[113,44,118,31],[113,49,118,36,"varsArr"],[113,56,118,16],[113,57,118,6],[115,0,119,6],[115,14,119,10],[115,19,119,15,"stack"],[115,24,119,10],[115,25,119,21,"indexOf"],[115,32,119,10],[115,33,119,29,"str"],[115,36,119,10],[115,41,119,37],[115,42,119,6],[115,44,119,40],[116,0,120,8],[116,18,120,14],[116,22,120,18,"Error"],[116,27,120,14],[116,28,120,24],[116,51,120,47],[116,56,120,52,"stack"],[116,61,120,47],[116,62,120,58,"concat"],[116,68,120,47],[116,69,120,65],[116,70,120,66,"str"],[116,73,120,65],[116,74,120,47],[116,76,120,72,"join"],[116,80,120,47],[116,81,120,77],[116,87,120,47],[116,88,120,14],[116,89,120,8],[117,0,121,7],[119,0,122,6],[119,14,122,10,"stack"],[119,19,122,15],[119,22,122,18],[119,27,122,23,"stack"],[119,32,122,18],[119,33,122,29,"concat"],[119,39,122,18],[119,40,122,36],[119,41,122,37,"str"],[119,44,122,36],[119,45,122,18],[119,46,122,6],[120,0,124,6],[120,17,124,13],[120,21,124,17,"Value"],[120,26,124,13],[120,27,124,23,"val"],[120,30,124,13],[120,32,124,28,"str"],[120,35,124,13],[120,37,124,33],[120,42,124,38,"varsArr"],[120,49,124,13],[120,51,124,47,"stack"],[120,56,124,13],[120,58,124,54,"calc"],[120,62,124,13],[120,64,124,6],[121,0,125,5],[121,9,117,4],[121,15,125,11],[122,0,126,6],[122,17,126,13],[122,21,126,6],[123,0,127,5],[124,0,128,3],[127,37,133,17,"str"],[127,40],[127,42,133,22],[128,0,134,4],[128,12,134,8,"percent"],[128,29,134,16,"isPercent"],[128,38,134,8],[128,39,134,26,"str"],[128,42,134,8],[128,43,134,4],[128,45,134,32],[129,0,135,6],[129,17,135,13,"percent"],[129,34,135,21,"calc"],[129,38,135,13],[129,39,135,26,"str"],[129,42,135,13],[129,44,135,31],[129,49,135,36,"prop"],[129,53,135,13],[129,54,135,6],[130,0,136,5],[132,0,137,4],[132,15,137,11],[132,19,137,4],[133,0,138,3],[136,33,143,13,"str"],[136,36],[136,38,143,18],[137,0,144,4],[137,12,144,8,"rem"],[137,25,144,12,"isRem"],[137,30,144,8],[137,31,144,18,"str"],[137,34,144,8],[137,35,144,4],[137,37,144,24],[138,0,145,6],[138,14,145,10,"remValue"],[138,22,145,18],[138,25,145,21,"vars"],[138,39,145,26,"get"],[138,42,145,21],[138,43,145,30],[138,49,145,21],[138,51,145,38],[138,56,145,43,"varsArr"],[138,63,145,21],[138,64,145,6],[140,0,146,6],[140,17,146,13,"rem"],[140,30,146,17,"calc"],[140,34,146,13],[140,35,146,22,"str"],[140,38,146,13],[140,40,146,27,"remValue"],[140,48,146,13],[140,49,146,6],[141,0,147,5],[141,9,144,4],[141,15,147,11],[142,0,148,6],[142,17,148,13],[142,21,148,6],[143,0,149,5],[144,0,150,3],[147,35,155,15,"str"],[147,38],[147,40,155,20],[148,0,156,4],[148,12,156,8,"val"],[148,15,156,11],[148,18,156,14,"parseFloat"],[148,28,156,24],[148,29,156,25,"str"],[148,32,156,24],[148,33,156,4],[149,0,157,4],[149,15,157,11],[149,16,157,12,"isNaN"],[149,21,157,17],[149,22,157,18,"val"],[149,25,157,17],[149,26,157,11],[149,29,157,25,"val"],[149,32,157,11],[149,35,157,31],[149,39,157,4],[150,0,158,3],[153,32,163,12],[154,0,164,4],[154,15,164,11],[154,16,164,12],[154,21,164,17,"stack"],[154,26,164,12],[154,27,164,23,"length"],[154,33,164,4],[155,0,165,3],[158,35,170,15],[159,0,171,4],[159,13,171,9,"outValue"],[159,21,171,4],[159,24,171,20],[159,29,171,25,"value"],[159,34,171,4],[160,0,172,3],[163,35,174,15],[164,0,177,4],[164,12,177,8,"vars"],[164,26,177,13,"isVar"],[164,31,177,8],[164,32,177,19],[164,37,177,24,"prop"],[164,41,177,8],[164,42,177,4],[164,44,177,31],[165,0,178,6],[166,0,179,5],[168,0,180,4],[168,12,180,8,"scaleFactor"],[168,23,180,19],[168,26,180,22,"vars"],[168,40,180,27,"get"],[168,43,180,22],[168,44,180,31],[168,52,180,22],[168,54,180,41],[168,59,180,46,"varsArr"],[168,66,180,22],[168,71,180,58],[168,72,180,4],[170,0,181,4],[170,12,181,8,"scaleFactor"],[170,23,181,19],[170,28,181,24],[170,29,181,4],[170,31,181,27],[171,0,182,6],[172,0,183,5],[174,0,184,4],[174,12,184,8,"scale"],[174,27,184,14,"isScalable"],[174,37,184,8],[174,38,184,25],[174,43,184,30,"outValue"],[174,51,184,8],[174,53,184,40],[174,58,184,45,"prop"],[174,62,184,8],[174,63,184,4],[174,65,184,52],[175,0,185,6],[175,15,185,11,"outValue"],[175,23,185,6],[175,26,185,22,"scale"],[175,41,185,28,"calc"],[175,45,185,22],[175,46,185,33],[175,51,185,38,"outValue"],[175,59,185,22],[175,61,185,48,"scaleFactor"],[175,72,185,22],[175,73,185,6],[176,0,186,5],[177,0,187,3]]},"type":"js/module"}]}