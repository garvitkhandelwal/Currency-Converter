{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var operators = {\n    '*': function _(v1, v2) {\n      return v1 * v2;\n    },\n    '+': function _(v1, v2) {\n      return v1 + v2;\n    },\n    '-': function _(v1, v2) {\n      return v1 - v2;\n    },\n    '/': function _(v1, v2) {\n      return v1 / v2;\n    }\n  };\n  var _default = {\n    isOperation: isOperation,\n    exec: exec\n  };\n  exports.default = _default;\n\n  function isOperation(str) {\n    var opInfo = findOperator(str);\n\n    if (opInfo) {\n      opInfo.v1 = str.substr(0, opInfo.pos).trim();\n      opInfo.v2 = str.substr(opInfo.pos + 1).trim();\n      delete opInfo.pos;\n      return opInfo;\n    } else {\n      return false;\n    }\n  }\n\n  function exec(opInfo) {\n    assertOperator(opInfo.operator);\n    assertValue(opInfo.v1);\n    assertValue(opInfo.v2);\n\n    if (opInfo.operator === '/') {\n      assertDivisor(opInfo.v2);\n    }\n\n    var fn = operators[opInfo.operator];\n    return fn(opInfo.v1, opInfo.v2);\n  }\n\n  function findOperator(str) {\n    for (var operator in operators) {\n      var pos = str.indexOf(operator);\n\n      if (pos >= 0) {\n        return {\n          operator: operator,\n          pos: pos\n        };\n      }\n    }\n  }\n\n  function assertOperator(operator) {\n    if (!operators[operator]) {\n      throw new Error('Unknown operator: ' + operator);\n    }\n  }\n\n  function assertValue(value) {\n    if (typeof value !== 'number') {\n      throw new Error('Operation value should be number, you try: ' + String(value));\n    }\n  }\n\n  function assertDivisor(divisor) {\n    if (divisor === 0) {\n      throw new Error('Operation divisor should not be zero');\n    }\n  }\n});","map":[[6,0,6,0],[6,6,6,6,"operators"],[6,15,6,15],[6,18,6,18],[7,0,7,2],[7,9,7,7],[7,20,7,8,"v1"],[7,22,7,7],[7,24,7,12,"v2"],[7,26,7,7],[8,0,7,7],[8,13,7,19,"v1"],[8,15,7,21],[8,18,7,24,"v2"],[8,20,7,7],[9,0,7,7],[9,5,6,18],[10,0,8,2],[10,9,8,7],[10,20,8,8,"v1"],[10,22,8,7],[10,24,8,12,"v2"],[10,26,8,7],[11,0,8,7],[11,13,8,19,"v1"],[11,15,8,21],[11,18,8,24,"v2"],[11,20,8,7],[12,0,8,7],[12,5,6,18],[13,0,9,2],[13,9,9,7],[13,20,9,8,"v1"],[13,22,9,7],[13,24,9,12,"v2"],[13,26,9,7],[14,0,9,7],[14,13,9,19,"v1"],[14,15,9,21],[14,18,9,24,"v2"],[14,20,9,7],[15,0,9,7],[15,5,6,18],[16,0,10,2],[16,9,10,7],[16,20,10,8,"v1"],[16,22,10,7],[16,24,10,12,"v2"],[16,26,10,7],[17,0,10,7],[17,13,10,19,"v1"],[17,15,10,21],[17,18,10,24,"v2"],[17,20,10,7],[18,0,10,7],[19,0,6,18],[19,3,6,0],[20,17,13,15],[21,0,14,2,"isOperation"],[21,4,14,2,"isOperation"],[21,15,14,13],[21,17,14,2,"isOperation"],[21,28,13,15],[22,0,15,2,"exec"],[22,4,15,2,"exec"],[22,8,15,6],[22,10,15,2,"exec"],[23,0,13,15],[23,3],[26,0,22,0],[26,11,22,9,"isOperation"],[26,22,22,0],[26,23,22,21,"str"],[26,26,22,0],[26,28,22,26],[27,0,23,2],[27,8,23,6,"opInfo"],[27,14,23,12],[27,17,23,15,"findOperator"],[27,29,23,27],[27,30,23,28,"str"],[27,33,23,27],[27,34,23,2],[29,0,24,2],[29,8,24,6,"opInfo"],[29,14,24,2],[29,16,24,14],[30,0,25,4,"opInfo"],[30,6,25,4,"opInfo"],[30,12,25,10],[30,13,25,11,"v1"],[30,15,25,4],[30,18,25,16,"str"],[30,21,25,19],[30,22,25,20,"substr"],[30,28,25,16],[30,29,25,27],[30,30,25,16],[30,32,25,30,"opInfo"],[30,38,25,36],[30,39,25,37,"pos"],[30,42,25,16],[30,44,25,42,"trim"],[30,48,25,16],[30,50,25,4],[31,0,26,4,"opInfo"],[31,6,26,4,"opInfo"],[31,12,26,10],[31,13,26,11,"v2"],[31,15,26,4],[31,18,26,16,"str"],[31,21,26,19],[31,22,26,20,"substr"],[31,28,26,16],[31,29,26,27,"opInfo"],[31,35,26,33],[31,36,26,34,"pos"],[31,39,26,27],[31,42,26,40],[31,43,26,16],[31,45,26,43,"trim"],[31,49,26,16],[31,51,26,4],[32,0,27,4],[32,13,27,11,"opInfo"],[32,19,27,17],[32,20,27,18,"pos"],[32,23,27,4],[33,0,28,4],[33,13,28,11,"opInfo"],[33,19,28,4],[34,0,29,3],[34,5,24,2],[34,11,29,9],[35,0,30,4],[35,13,30,11],[35,18,30,4],[36,0,31,3],[37,0,32,1],[39,0,38,0],[39,11,38,9,"exec"],[39,15,38,0],[39,16,38,14,"opInfo"],[39,22,38,0],[39,24,38,22],[40,0,39,2,"assertOperator"],[40,4,39,2,"assertOperator"],[40,18,39,16],[40,19,39,17,"opInfo"],[40,25,39,23],[40,26,39,24,"operator"],[40,34,39,16],[40,35,39,2],[41,0,40,2,"assertValue"],[41,4,40,2,"assertValue"],[41,15,40,13],[41,16,40,14,"opInfo"],[41,22,40,20],[41,23,40,21,"v1"],[41,25,40,13],[41,26,40,2],[42,0,41,2,"assertValue"],[42,4,41,2,"assertValue"],[42,15,41,13],[42,16,41,14,"opInfo"],[42,22,41,20],[42,23,41,21,"v2"],[42,25,41,13],[42,26,41,2],[44,0,42,2],[44,8,42,6,"opInfo"],[44,14,42,12],[44,15,42,13,"operator"],[44,23,42,6],[44,28,42,26],[44,31,42,2],[44,33,42,31],[45,0,43,4,"assertDivisor"],[45,6,43,4,"assertDivisor"],[45,19,43,17],[45,20,43,18,"opInfo"],[45,26,43,24],[45,27,43,25,"v2"],[45,29,43,17],[45,30,43,4],[46,0,44,3],[48,0,45,2],[48,8,45,6,"fn"],[48,10,45,8],[48,13,45,11,"operators"],[48,22,45,20],[48,23,45,21,"opInfo"],[48,29,45,27],[48,30,45,28,"operator"],[48,38,45,20],[48,39,45,2],[49,0,46,2],[49,11,46,9,"fn"],[49,13,46,11],[49,14,46,12,"opInfo"],[49,20,46,18],[49,21,46,19,"v1"],[49,23,46,11],[49,25,46,23,"opInfo"],[49,31,46,29],[49,32,46,30,"v2"],[49,34,46,11],[49,35,46,2],[50,0,47,1],[52,0,49,0],[52,11,49,9,"findOperator"],[52,23,49,0],[52,24,49,22,"str"],[52,27,49,0],[52,29,49,27],[53,0,50,2],[53,9,50,7],[53,13,50,11,"operator"],[53,21,50,2],[53,25,50,23,"operators"],[53,34,50,2],[53,36,50,34],[54,0,51,4],[54,10,51,8,"pos"],[54,13,51,11],[54,16,51,14,"str"],[54,19,51,17],[54,20,51,18,"indexOf"],[54,27,51,14],[54,28,51,26,"operator"],[54,36,51,14],[54,37,51,4],[56,0,52,4],[56,10,52,8,"pos"],[56,13,52,11],[56,17,52,15],[56,18,52,4],[56,20,52,18],[57,0,53,6],[57,15,53,13],[58,0,53,14,"operator"],[58,10,53,14,"operator"],[58,18,53,22],[58,20,53,14,"operator"],[58,28,53,13],[59,0,53,24,"pos"],[59,10,53,24,"pos"],[59,13,53,27],[59,15,53,24,"pos"],[60,0,53,13],[60,9,53,6],[61,0,54,5],[62,0,55,3],[63,0,56,1],[65,0,58,0],[65,11,58,9,"assertOperator"],[65,25,58,0],[65,26,58,24,"operator"],[65,34,58,0],[65,36,58,34],[66,0,59,2],[66,8,59,6],[66,9,59,7,"operators"],[66,18,59,16],[66,19,59,17,"operator"],[66,27,59,16],[66,28,59,2],[66,30,59,28],[67,0,60,4],[67,12,60,10],[67,16,60,14,"Error"],[67,21,60,10],[67,22,60,20],[67,45,60,43,"operator"],[67,53,60,10],[67,54,60,4],[68,0,61,3],[69,0,62,1],[71,0,64,0],[71,11,64,9,"assertValue"],[71,22,64,0],[71,23,64,21,"value"],[71,28,64,0],[71,30,64,28],[72,0,65,2],[72,8,65,6],[72,15,65,13,"value"],[72,20,65,6],[72,25,65,23],[72,33,65,2],[72,35,65,33],[73,0,66,4],[73,12,66,10],[73,16,66,14,"Error"],[73,21,66,10],[73,22,66,20],[73,70,66,68,"String"],[73,76,66,74],[73,77,66,75,"value"],[73,82,66,74],[73,83,66,10],[73,84,66,4],[74,0,67,3],[75,0,68,1],[77,0,70,0],[77,11,70,9,"assertDivisor"],[77,24,70,0],[77,25,70,23,"divisor"],[77,32,70,0],[77,34,70,32],[78,0,71,2],[78,8,71,6,"divisor"],[78,15,71,13],[78,20,71,18],[78,21,71,2],[78,23,71,21],[79,0,72,4],[79,12,72,10],[79,16,72,14,"Error"],[79,21,72,10],[79,22,72,20],[79,60,72,10],[79,61,72,4],[80,0,73,3],[81,0,74,1]]},"type":"js/module"}]}